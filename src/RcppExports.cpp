// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/pacotest.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// VI
Rcpp::List VI(arma::mat Udata, arma::mat Wdata, double NumbBoot);
RcppExport SEXP _pacotest_VI(SEXP UdataSEXP, SEXP WdataSEXP, SEXP NumbBootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Udata(UdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Wdata(WdataSEXP);
    Rcpp::traits::input_parameter< double >::type NumbBoot(NumbBootSEXP);
    rcpp_result_gen = Rcpp::wrap(VI(Udata, Wdata, NumbBoot));
    return rcpp_result_gen;
END_RCPP
}
// EC
Rcpp::List EC(arma::mat Udata, arma::mat Wdata, double NumbBoot, double Grouping, double finalComparison, double ExpMinSampleSize);
RcppExport SEXP _pacotest_EC(SEXP UdataSEXP, SEXP WdataSEXP, SEXP NumbBootSEXP, SEXP GroupingSEXP, SEXP finalComparisonSEXP, SEXP ExpMinSampleSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Udata(UdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Wdata(WdataSEXP);
    Rcpp::traits::input_parameter< double >::type NumbBoot(NumbBootSEXP);
    Rcpp::traits::input_parameter< double >::type Grouping(GroupingSEXP);
    Rcpp::traits::input_parameter< double >::type finalComparison(finalComparisonSEXP);
    Rcpp::traits::input_parameter< double >::type ExpMinSampleSize(ExpMinSampleSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(EC(Udata, Wdata, NumbBoot, Grouping, finalComparison, ExpMinSampleSize));
    return rcpp_result_gen;
END_RCPP
}
// CCC
Rcpp::List CCC(arma::mat Udata, arma::mat Wdata, double doubleDimCondSet, double Grouping, double doubleWithEstUncert, double doubleEstUncertWithRanks, double finalComparison, arma::mat& data, Rcpp::DataFrame svcmDataFrame, Rcpp::List cPitData, double ExpMinSampleSize, double penaltyLevel, double penaltyPower, double Gamma0Partition);
RcppExport SEXP _pacotest_CCC(SEXP UdataSEXP, SEXP WdataSEXP, SEXP doubleDimCondSetSEXP, SEXP GroupingSEXP, SEXP doubleWithEstUncertSEXP, SEXP doubleEstUncertWithRanksSEXP, SEXP finalComparisonSEXP, SEXP dataSEXP, SEXP svcmDataFrameSEXP, SEXP cPitDataSEXP, SEXP ExpMinSampleSizeSEXP, SEXP penaltyLevelSEXP, SEXP penaltyPowerSEXP, SEXP Gamma0PartitionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Udata(UdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Wdata(WdataSEXP);
    Rcpp::traits::input_parameter< double >::type doubleDimCondSet(doubleDimCondSetSEXP);
    Rcpp::traits::input_parameter< double >::type Grouping(GroupingSEXP);
    Rcpp::traits::input_parameter< double >::type doubleWithEstUncert(doubleWithEstUncertSEXP);
    Rcpp::traits::input_parameter< double >::type doubleEstUncertWithRanks(doubleEstUncertWithRanksSEXP);
    Rcpp::traits::input_parameter< double >::type finalComparison(finalComparisonSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type svcmDataFrame(svcmDataFrameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cPitData(cPitDataSEXP);
    Rcpp::traits::input_parameter< double >::type ExpMinSampleSize(ExpMinSampleSizeSEXP);
    Rcpp::traits::input_parameter< double >::type penaltyLevel(penaltyLevelSEXP);
    Rcpp::traits::input_parameter< double >::type penaltyPower(penaltyPowerSEXP);
    Rcpp::traits::input_parameter< double >::type Gamma0Partition(Gamma0PartitionSEXP);
    rcpp_result_gen = Rcpp::wrap(CCC(Udata, Wdata, doubleDimCondSet, Grouping, doubleWithEstUncert, doubleEstUncertWithRanks, finalComparison, data, svcmDataFrame, cPitData, ExpMinSampleSize, penaltyLevel, penaltyPower, Gamma0Partition));
    return rcpp_result_gen;
END_RCPP
}
// covOfCorrelationsWithEstimationFromCpp
void covOfCorrelationsWithEstimationFromCpp(arma::mat& data, Rcpp::DataFrame svcmDataFrame, arma::umat& indexVectors, arma::uvec& nObsPerVector, Rcpp::List cPitData, arma::vec& theta, arma::mat& sigma, int intEstUncertWithRanks);
RcppExport SEXP _pacotest_covOfCorrelationsWithEstimationFromCpp(SEXP dataSEXP, SEXP svcmDataFrameSEXP, SEXP indexVectorsSEXP, SEXP nObsPerVectorSEXP, SEXP cPitDataSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP intEstUncertWithRanksSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type svcmDataFrame(svcmDataFrameSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type indexVectors(indexVectorsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type nObsPerVector(nObsPerVectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cPitData(cPitDataSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type intEstUncertWithRanks(intEstUncertWithRanksSEXP);
    covOfCorrelationsWithEstimationFromCpp(data, svcmDataFrame, indexVectors, nObsPerVector, cPitData, theta, sigma, intEstUncertWithRanks);
    return R_NilValue;
END_RCPP
}
// testStatEqualCorrWithoutEstimationCpp
Rcpp::List testStatEqualCorrWithoutEstimationCpp(arma::umat indexVectors, arma::uvec nObsPerVector, arma::mat Udata);
RcppExport SEXP _pacotest_testStatEqualCorrWithoutEstimationCpp(SEXP indexVectorsSEXP, SEXP nObsPerVectorSEXP, SEXP UdataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type indexVectors(indexVectorsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nObsPerVector(nObsPerVectorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Udata(UdataSEXP);
    rcpp_result_gen = Rcpp::wrap(testStatEqualCorrWithoutEstimationCpp(indexVectors, nObsPerVector, Udata));
    return rcpp_result_gen;
END_RCPP
}
// testStatEqualCorrWithEstimationCpp
Rcpp::List testStatEqualCorrWithEstimationCpp(arma::umat indexVectors, arma::uvec nObsPerVector, arma::mat Udata, arma::mat data, Rcpp::DataFrame svcmDataFrame, Rcpp::List cPitData);
RcppExport SEXP _pacotest_testStatEqualCorrWithEstimationCpp(SEXP indexVectorsSEXP, SEXP nObsPerVectorSEXP, SEXP UdataSEXP, SEXP dataSEXP, SEXP svcmDataFrameSEXP, SEXP cPitDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type indexVectors(indexVectorsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nObsPerVector(nObsPerVectorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Udata(UdataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type svcmDataFrame(svcmDataFrameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cPitData(cPitDataSEXP);
    rcpp_result_gen = Rcpp::wrap(testStatEqualCorrWithEstimationCpp(indexVectors, nObsPerVector, Udata, data, svcmDataFrame, cPitData));
    return rcpp_result_gen;
END_RCPP
}
